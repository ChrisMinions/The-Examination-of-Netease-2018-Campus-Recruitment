'''
[编程题] 最长公共子括号序列
时间限制：1秒
空间限制：100768K
一个合法的括号匹配序列被定义为:
1. 空串""是合法的括号序列
2. 如果"X"和"Y"是合法的序列,那么"XY"也是一个合法的括号序列
3. 如果"X"是一个合法的序列,那么"(X)"也是一个合法的括号序列
4. 每个合法的括号序列都可以由上面的规则生成
例如"", "()", "()()()", "(()())", "(((()))"都是合法的。
从一个字符串S中移除零个或者多个字符得到的序列称为S的子序列。
例如"abcde"的子序列有"abe","","abcde"等。
定义LCS(S,T)为字符串S和字符串T最长公共子序列的长度,即一个最长的序列W既是S的子序列也是T的子序列的长度。
小易给出一个合法的括号匹配序列s,小易希望你能找出具有以下特征的括号序列t:
1、t跟s不同,但是长度相同
2、t也是一个合法的括号匹配序列
3、LCS(s, t)是满足上述两个条件的t中最大的
因为这样的t可能存在多个,小易需要你计算出满足条件的t有多少个。

如样例所示: s = "(())()",跟字符串s长度相同的合法括号匹配序列有:
"()(())", "((()))", "()()()", "(()())",其中LCS( "(())()", "()(())" )为4,其他三个都为5,所以输出3. 
输入描述:
输入包括字符串s(4 ≤ |s| ≤ 50,|s|表示字符串长度),保证s是一个合法的括号匹配序列。


输出描述:
输出一个正整数,满足条件的t的个数。

输入例子1:
(())()

输出例子1:
3
'''

'''
解题思路：重要前提
  要解出这道题目，必须要知道一个重要的前提：满足条件的t和s最长公共子序列的长度必然是其原长度-1
  有了这个前提后，这道题就好做了。首先写个函数判断一个序列是否合法。
  接着遍历取出原序列中的任何一个元素，并放置在原序列中的任意其他位置，得到一个新序列，
  判断其是否合法，如果合法，就把它放进一个集合中(防重)。最后输出这个集合的长度即为满足条件的序列个数。
'''

'''
代码运行结果：
答案正确:恭喜！您提交的程序通过了所有的测试用例
'''

def isl(t1):
    length = len(t1)
    temp = 0
    for i in range(length):
        if t1[i] == '(': temp += 1
        else: temp -= 1
        if temp < 0:
            return 0
    return 1


def main(t):
    length = len(t)
    count = set()
    for i in range(length):
        temp1 = t[:i] + t[i+1:]
        for j in range(length):
            if i == j:
                continue
            temp2 = temp1[:j] + t[i] + temp1[j:]
            if isl(temp2):
                if temp2 != t:
                    count.add(temp2)
    print(len(count))

if __name__ == "__main__":
    string = input()
    main(string)
